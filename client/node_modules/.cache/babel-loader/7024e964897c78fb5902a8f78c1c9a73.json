{"ast":null,"code":"import _regeneratorRuntime from \"/var/www/html/tmpVersion/back_end_afst_system/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/var/www/html/tmpVersion/back_end_afst_system/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport SascWebApi from '../../apis/SascWeb';\nimport { form } from '../../constants/types';\n\nvar verifyGetFormList = function verifyGetFormList(response) {\n  if (response.data.success === false) {\n    return {\n      type: form.FORM_LIST_FAILED\n    };\n  }\n\n  return {\n    type: form.FORM_LIST_SUCCESS,\n    payload: response.data.items\n  };\n};\n\nexport var getFormList = function getFormList() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch, getState) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return SascWebApi.get(\"/form/\".concat(getState().activeClient.alias, \"/list\"));\n\n              case 2:\n                response = _context.sent;\n                dispatch(verifyGetFormList(response));\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n};\n\nvar verifyGetForm = function verifyGetForm(response) {\n  if (response.data.success === false) {\n    return {\n      type: form.FORM_ITEM_FAILED\n    };\n  }\n\n  return {\n    type: form.FORM_ITEM_SUCCESS,\n    payload: response.data.item\n  };\n};\n\nexport var getForm = function getForm(id) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(dispatch, getState) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return SascWebApi.get(\"/form/\".concat(getState().activeClient.alias, \"/\").concat(id));\n\n              case 2:\n                response = _context2.sent;\n                dispatch(verifyGetForm(response));\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x3, _x4) {\n        return _ref2.apply(this, arguments);\n      };\n    }()\n  );\n};\n\nvar verifyUploadForm = function verifyUploadForm(response) {\n  if (response.data.success === false) {\n    return {\n      type: form.FORM_ITEM_EDIT_FAILED\n    };\n  }\n\n  return {\n    type: form.FORM_ITEM_EDIT_SUCCESS,\n    payload: {\n      redirect: 'forms',\n      message: \"Form edited correctly \"\n    }\n  };\n};\n\nexport var uploadForm = function uploadForm(formValues, id) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(dispatch, getState) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return SascWebApi.put(\"/form/\".concat(getState().activeClient.alias, \"/\").concat(id), {\n                  formData: formValues,\n                  inputData: getState().listInput\n                });\n\n              case 2:\n                response = _context3.sent;\n                dispatch(verifyUploadForm(response));\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x5, _x6) {\n        return _ref3.apply(this, arguments);\n      };\n    }()\n  );\n};","map":{"version":3,"sources":["/var/www/html/tmpVersion/back_end_afst_system/src/actions/client/formClientActions.js"],"names":["SascWebApi","form","verifyGetFormList","response","data","success","type","FORM_LIST_FAILED","FORM_LIST_SUCCESS","payload","items","getFormList","dispatch","getState","get","activeClient","alias","verifyGetForm","FORM_ITEM_FAILED","FORM_ITEM_SUCCESS","item","getForm","id","verifyUploadForm","FORM_ITEM_EDIT_FAILED","FORM_ITEM_EDIT_SUCCESS","redirect","message","uploadForm","formValues","put","formData","inputData","listInput"],"mappings":"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","sourcesContent":["import SascWebApi from '../../apis/SascWeb'\nimport {form} from '../../constants/types'\n\n\nconst verifyGetFormList = (response) =>{\n    if(response.data.success === false){\n        return {\n            type: form.FORM_LIST_FAILED\n        }\n    }\n    return {\n        type: form.FORM_LIST_SUCCESS,\n        payload: response.data.items\n    }\n};\n\nexport const getFormList = () => async (dispatch, getState) =>{\n        const response = await SascWebApi.get(`/form/${getState().activeClient.alias}/list`);\n        dispatch(verifyGetFormList(response));\n}\n\nconst verifyGetForm = (response) =>{\n    if(response.data.success === false){\n        return {\n            type: form.FORM_ITEM_FAILED\n        }\n    }\n    return {\n        type: form.FORM_ITEM_SUCCESS,\n        payload: response.data.item\n    }\n};\n\nexport const getForm = (id) => async (dispatch, getState) =>{\n    const response = await SascWebApi.get(`/form/${getState().activeClient.alias}/${id}`);\n    dispatch(verifyGetForm(response));\n}\n\nconst verifyUploadForm = (response) =>{\n    if(response.data.success === false){\n        return {\n            type: form.FORM_ITEM_EDIT_FAILED\n        }\n    }\n    return {\n        type: form.FORM_ITEM_EDIT_SUCCESS,\n        payload:{\n            redirect: 'forms',\n            message: \"Form edited correctly \"\n        }\n    }\n};\n\nexport const uploadForm = (formValues, id) => async (dispatch, getState) =>{\n    const response = await SascWebApi.put(`/form/${getState().activeClient.alias}/${id}`,\n        {formData: formValues, inputData: getState().listInput});\n    dispatch(verifyUploadForm(response));\n}"]},"metadata":{},"sourceType":"module"}