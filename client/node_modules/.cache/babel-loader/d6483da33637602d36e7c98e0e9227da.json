{"ast":null,"code":"var _jsxFileName = \"/var/www/html/tmpVersion/back_end_afst_system/src/components/modules/clientBreadcrumbs.js\";\nimport React from 'react';\nimport { Divider, Icon, Segment } from \"semantic-ui-react\";\nexport default (function (path, clientName) {\n  var parts = path.split('/');\n  parts.splice(0, 3);\n  var pathString = clientName;\n\n  if (parts.length > 0) {\n    pathString += ' /';\n  }\n\n  pathString += parts.map(function (item) {\n    return ' ' + item.charAt(0).toUpperCase() + item.slice(1) + ' /';\n  });\n  return React.createElement(Segment, {\n    className: 'breadCrumb',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, React.createElement(Icon, {\n    name: 'home',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }), \" \", pathString);\n});","map":{"version":3,"sources":["/var/www/html/tmpVersion/back_end_afst_system/src/components/modules/clientBreadcrumbs.js"],"names":["React","Divider","Icon","Segment","path","clientName","parts","split","splice","pathString","length","map","item","charAt","toUpperCase","slice"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,OAAR,EAAiBC,IAAjB,EAAuBC,OAAvB,QAAqC,mBAArC;AAEA,gBAAe,UAACC,IAAD,EAAOC,UAAP,EAAqB;AAChC,MAAMC,KAAK,GAAGF,IAAI,CAACG,KAAL,CAAW,GAAX,CAAd;AACAD,EAAAA,KAAK,CAACE,MAAN,CAAa,CAAb,EAAe,CAAf;AACA,MAAIC,UAAU,GAAGJ,UAAjB;;AACA,MAAGC,KAAK,CAACI,MAAN,GAAe,CAAlB,EAAqB;AACjBD,IAAAA,UAAU,IAAG,IAAb;AACH;;AACDA,EAAAA,UAAU,IAAGH,KAAK,CAACK,GAAN,CACT,UAACC,IAAD,EAAU;AACF,WAAO,MAAIA,IAAI,CAACC,MAAL,CAAY,CAAZ,EAAeC,WAAf,EAAJ,GAAmCF,IAAI,CAACG,KAAL,CAAW,CAAX,CAAnC,GAAiD,IAAxD;AACP,GAHQ,CAAb;AAKA,SACI,oBAAC,OAAD;AAAS,IAAA,SAAS,EAAE,YAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAE,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,OAC2BN,UAD3B,CADJ;AAKH,CAjBD","sourcesContent":["import React from 'react'\nimport {Divider, Icon, Segment} from \"semantic-ui-react\";\n\nexport default (path, clientName) =>{\n    const parts = path.split('/');\n    parts.splice(0,3);\n    let pathString = clientName;\n    if(parts.length > 0 ){\n        pathString +=' /';\n    }\n    pathString+= parts.map(\n        (item) => {\n                return ' '+item.charAt(0).toUpperCase() + item.slice(1)+' /'\n        }\n    )\n    return(\n        <Segment className={'breadCrumb'}>\n            <Icon name={'home'}/> {pathString}\n        </Segment>\n    )\n}"]},"metadata":{},"sourceType":"module"}